# Generated by Selenium IDE
import pytest
import time
import json
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.common.action_chains import ActionChains
from selenium.webdriver.support import expected_conditions
from selenium.webdriver.support.wait import WebDriverWait
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.common.desired_capabilities import DesiredCapabilities

class TestDefaultSuite():
  def setup_method(self, method):
    self.driver = webdriver.Chrome()
    self.vars = {}
  
  def teardown_method(self, method):
    self.driver.quit()
  
  def test_keyword(self):
    self.driver.get("https://sandbox.moodledemo.net/user/index.php?id=3/user/index.php?id=3")
    self.driver.set_window_size(826, 824)
    self.driver.find_element(By.XPATH, "//html/body/div[2]/div[5]/div/div[3]/div/section/div/div[2]/div[2]/div/fieldset/div[1]/div[1]/select").click()
    dropdown = self.driver.find_element(By.XPATH, "//html/body/div[2]/div[5]/div/div[3]/div/section/div/div[2]/div[2]/div/fieldset/div[1]/div[1]/select")
    dropdown.find_element(By.XPATH, "//option[. = 'All']").click()
    self.driver.find_element(By.XPATH, "//html/body/div[2]/div[5]/div/div[3]/div/section/div/div[2]/div[2]/div/fieldset/div[1]/select").click()
    dropdown = self.driver.find_element(By.XPATH, "//html/body/div[2]/div[5]/div/div[3]/div/section/div/div[2]/div[2]/div/fieldset/div[1]/select")
    dropdown.find_element(By.XPATH, "//option[. = 'Keyword']").click()
    self.driver.find_element(By.XPATH, "//html/body/div[2]/div[5]/div/div[3]/div/section/div/div[2]/div[2]/div/fieldset/div[1]/div[2]/div[1]/input").click()
    self.driver.find_element(By.XPATH, "//html/body/div[2]/div[5]/div/div[3]/div/section/div/div[2]/div[2]/div/fieldset/div[1]/div[2]/div[1]/input").send_keys("Vinh")
    self.driver.find_element(By.CSS_SELECTOR, ".d-flex > .btn-primary").click()
    self.driver.find_element(By.ID, "yui_3_18_1_1_1701785437741_45").click()
  
  def test_enrolmentmethod(self):
    self.driver.get("https://sandbox.moodledemo.net/user/index.php?id=3")
    self.driver.set_window_size(828, 824)
    self.driver.find_element(By.XPATH, "//html/body/div[2]/div[5]/div/div[3]/div/section/div/div[2]/div[2]/div/fieldset/div[1]/div[1]/select").click()
    dropdown = self.driver.find_element(By.XPATH, "//html/body/div[2]/div[5]/div/div[3]/div/section/div/div[2]/div[2]/div/fieldset/div[1]/div[1]/select")
    dropdown.find_element(By.XPATH, "//option[. = 'All']").click()
    self.driver.find_element(By.XPATH, "//html/body/div[2]/div[5]/div/div[3]/div/section/div/div[2]/div[2]/div/fieldset/div[1]/select").click()
    dropdown = self.driver.find_element(By.XPATH, "//html/body/div[2]/div[5]/div/div[3]/div/section/div/div[2]/div[2]/div/fieldset/div[1]/select")
    dropdown.find_element(By.XPATH, "//option[. = 'Enrolment methods']").click()
    self.driver.find_element(By.ID, "form_autocomplete_input-1701785906400").click()
    self.driver.find_element(By.ID, "form_autocomplete_downarrow-1701785906400").click()
    self.driver.find_element(By.XPATH, "//html/body/div[2]/div[5]/div/div[3]/div/section/div/div[2]/div[3]/button[3]").click()
  
  def test_role(self):
    self.driver.get("https://sandbox.moodledemo.net/user/index.php?id=3")
    self.driver.set_window_size(826, 824)
    self.driver.find_element(By.XPATH, "//html/body/div[2]/div[5]/div/div[3]/div/section/div/div[2]/div[2]/div/fieldset/div[1]/select").click()
    dropdown = self.driver.find_element(By.XPATH, "//html/body/div[2]/div[5]/div/div[3]/div/section/div/div[2]/div[2]/div/fieldset/div[1]/select")
    dropdown.find_element(By.XPATH, "//option[. = 'Roles']").click()
    self.driver.find_element(By.XPATH, "//html/body/div[2]/div[5]/div/div[3]/div/section/div/div[2]/div[2]/div/fieldset/div[1]/div[2]/div[1]/span").click()
    self.driver.find_element(By.XPATH, "//html/body/div[2]/div[5]/div/div[3]/div/section/div/div[2]/div[2]/div/fieldset/div[1]/div[2]/ul/li[4]").click()
    self.driver.find_element(By.CSS_SELECTOR, "#form_autocomplete_suggestions-1701785717528 > li:nth-child(4)").click()
    self.driver.find_element(By.CSS_SELECTOR, ".d-flex > .btn-primary").click()
    self.driver.find_element(By.ID, "yui_3_18_1_1_1701785717123_66").click()
  
  def test_status(self):
    self.driver.get("https://sandbox.moodledemo.net/user/index.php?id=3")
    self.driver.set_window_size(826, 824)
    self.driver.find_element(By.XPATH, "//html/body/div[2]/div[5]/div/div[3]/div/section/div/div[2]/div[2]/div/fieldset/div[1]/select").click()
    dropdown = self.driver.find_element(By.XPATH, "//html/body/div[2]/div[5]/div/div[3]/div/section/div/div[2]/div[2]/div/fieldset/div[1]/select")
    dropdown.find_element(By.XPATH, "//option[. = 'Status']").click()
    self.driver.find_element(By.XPATH, "//html/body/div[2]/div[5]/div/div[3]/div/section/div/div[2]/div[2]/div/fieldset/div[1]/div[2]/div[1]/span").click()
    self.driver.find_element(By.XPATH, "//span[@id=\'form_autocomplete_downarrow-1701785597621\']").click()
    self.driver.find_element(By.ID, "form_autocomplete_suggestions-1701785597621-0").click()
    self.driver.find_element(By.CSS_SELECTOR, ".d-flex > .btn-primary").click()
    self.driver.find_element(By.ID, "yui_3_18_1_1_1701785597210_52").click()
    element = self.driver.find_element(By.XPATH, "//html/body/div[2]/div[5]/div/div[3]/div/section/div/div[2]/div[3]/button[3]")
    actions = ActionChains(self.driver)
    actions.move_to_element(element).perform()
    element = self.driver.find_element(By.CSS_SELECTOR, "body")
    actions = ActionChains(self.driver)
    actions.move_to_element(element, 0, 0).perform()

    def run(self):
        result = []
        fail_test_name = []

        for test_method in dir(self):
            if test_method.startswith("test_") and callable(getattr(self, test_method)):
                self.setup_method(None)
                test = getattr(self, test_method)()
                result.append(test)
                if not test:
                    fail_test_name.append(test_method)
                self.teardown_method(None)

        fail_test_name_str = 'Fail test cases:\n\t' + '\n\t'.join(name for name in fail_test_name) if len(fail_test_name) != 0 else 'Fail test cases: None'
        return f"""
        \n---------- Test submit assignment result -----------\nCorrect tests: {result.count(True)}/{len(result)}\n{fail_test_name_str}\n------------------------------------
        """
  




